{"version":3,"file":"okta-react.umd.js","sources":["../../src/OktaContext.ts","../../src/OktaError.tsx","../../src/LoginCallback.tsx","../../src/SecureRoute.tsx","../../src/Security.tsx","../../src/withOktaAuth.tsx"],"sourcesContent":["/*\n * Copyright (c) 2020-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\nimport * as React from 'react';\nimport { AuthState, OktaAuth } from '@okta/okta-auth-js';\n\nexport type OnAuthRequiredFunction = (oktaAuth: OktaAuth) => Promise<void> | void;\n\nexport interface IOktaContext {\n    oktaAuth: OktaAuth;\n    authState: AuthState;\n    _onAuthRequired: OnAuthRequiredFunction;\n}\n\nconst OktaContext = React.createContext<IOktaContext | null>(null);\n\nexport const useOktaAuth = (): IOktaContext => React.useContext(OktaContext);\n\nexport default OktaContext;\n","/*\n * Copyright (c) 2020-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport * as React from 'react';\n\nconst OktaError: React.FC<{ error: Error }> = ({ error }) => { \n  if(error.name && error.message) { \n    return <p>{error.name}: {error.message}</p>;\n  }\n  return <p>Error: {error.toString()}</p>;\n};\n\nexport default OktaError;\n","/*\n * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport * as React from 'react';\nimport { useOktaAuth } from './OktaContext';\nimport OktaError from './OktaError';\n\nconst LoginCallback: React.FC<{ \n  errorComponent?: React.ComponentType<{ error: Error }>\n}> = ({ errorComponent }) => { \n  const { oktaAuth, authState } = useOktaAuth();\n  const authStateReady = !authState.isPending;\n\n  const ErrorReporter = errorComponent || OktaError;\n\n  React.useEffect(() => {\n    oktaAuth.handleLoginRedirect();\n  }, [oktaAuth]);\n\n  if(authStateReady && authState.error) { \n    return <ErrorReporter error={authState.error}/>;\n  }\n\n  return null;\n};\n\nexport default LoginCallback;\n","/*\n * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport * as React from 'react';\nimport { useOktaAuth, OnAuthRequiredFunction } from './OktaContext';\nimport { Route, useRouteMatch, RouteProps } from 'react-router-dom';\n\nconst SecureRoute: React.FC<{\n  onAuthRequired?: OnAuthRequiredFunction;\n} & RouteProps & React.HTMLAttributes<HTMLDivElement>> = ({ \n  onAuthRequired, \n  ...routeProps \n}) => { \n  const { oktaAuth, authState, _onAuthRequired } = useOktaAuth();\n  const match = useRouteMatch(routeProps);\n  const pendingLogin = React.useRef(false);\n\n  React.useEffect(() => {\n    const handleLogin = async () => {\n      if (pendingLogin.current) {\n        return;\n      }\n\n      pendingLogin.current = true;\n\n      oktaAuth.setOriginalUri();\n      const onAuthRequiredFn = onAuthRequired || _onAuthRequired;\n      if (onAuthRequiredFn) {\n        await onAuthRequiredFn(oktaAuth);\n      } else {\n        await oktaAuth.signInWithRedirect();\n      }\n    };\n\n    // Only process logic if the route matches\n    if (!match) {\n      return;\n    }\n\n    if (authState.isAuthenticated) {\n      pendingLogin.current = false;\n      return;\n    }\n\n    // Start login if app has decided it is not logged in and there is no pending signin\n    if(!authState.isAuthenticated && !authState.isPending) { \n      handleLogin();\n    }  \n  }, [\n    authState.isPending, \n    authState.isAuthenticated, \n    oktaAuth, \n    match, \n    onAuthRequired, \n    _onAuthRequired\n  ]);\n\n  if (!authState.isAuthenticated) {\n    return null;\n  }\n\n  return (\n    <Route\n      { ...routeProps }\n    />\n  );\n};\n\nexport default SecureRoute;\n","/*!\n * Copyright (c) 2017-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport * as React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { toRelativeUrl, AuthSdkError, OktaAuth } from '@okta/okta-auth-js';\nimport OktaContext, { OnAuthRequiredFunction } from './OktaContext';\nimport OktaError from './OktaError';\n\nconst Security: React.FC<{\n  oktaAuth: OktaAuth, \n  onAuthRequired?: OnAuthRequiredFunction,\n  children?: React.ReactNode\n} & React.HTMLAttributes<HTMLDivElement>> = ({ \n  oktaAuth, \n  onAuthRequired, \n  children \n}) => { \n  const history = useHistory();\n  const [authState, setAuthState] = React.useState(() => {\n    if (!oktaAuth) {\n      return { \n        isPending: true,\n        isAuthenticated: false,\n        idToken: null,\n        accessToken: null,\n      };\n    }\n    return oktaAuth.authStateManager.getAuthState();\n  });\n\n  React.useEffect(() => {\n    if (!oktaAuth) {\n      return;\n    }\n\n    // Add default restoreOriginalUri callback\n    if (!oktaAuth.options.restoreOriginalUri) {\n      oktaAuth.options.restoreOriginalUri = async (_, originalUri) => {\n        history.replace(toRelativeUrl(originalUri, window.location.origin));\n      };\n    }\n\n    // Add okta-react userAgent\n    oktaAuth.userAgent = `${process.env.PACKAGE_NAME}/${process.env.PACKAGE_VERSION} ${oktaAuth.userAgent}`;\n\n    // Update Security provider with latest authState\n    oktaAuth.authStateManager.subscribe((authState) => {\n      setAuthState(authState);\n    });\n\n    // Trigger an initial change event to make sure authState is latest\n    if (!oktaAuth.isLoginRedirect()) {\n      oktaAuth.authStateManager.updateAuthState();\n    }\n\n    return () => oktaAuth.authStateManager.unsubscribe();\n  }, [oktaAuth, history]);\n\n  if (!oktaAuth) {\n    const err = new AuthSdkError('No oktaAuth instance passed to Security Component.');\n    return <OktaError error={err} />;\n  }\n\n  return (\n    <OktaContext.Provider value={{ \n      oktaAuth, \n      authState, \n      _onAuthRequired: onAuthRequired\n    }}>\n      {children}\n    </OktaContext.Provider>\n  );\n};\n\nexport default Security;\n","/*\n * Copyright (c) 2020-Present, Okta, Inc. and/or its affiliates. All rights reserved.\n * The Okta software accompanied by this notice is provided pursuant to the Apache License, Version 2.0 (the \"License.\")\n *\n * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0.\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *\n * See the License for the specific language governing permissions and limitations under the License.\n */\n\nimport * as React from 'react';\nimport { useOktaAuth, IOktaContext } from './OktaContext';\n\nconst withOktaAuth = <P extends IOktaContext>(\n  ComponentToWrap: React.ComponentType<P>\n): React.FC<Omit<P, keyof IOktaContext>> => { \n  const WrappedComponent = (props) => { \n    const oktaAuthProps = useOktaAuth();\n    return <ComponentToWrap {...oktaAuthProps as IOktaContext } {...props as P} />;\n  };\n  WrappedComponent.displayName = 'withOktaAuth_' + (ComponentToWrap.displayName || ComponentToWrap.name);\n  return WrappedComponent;\n};\n\nexport default withOktaAuth;\n"],"names":["OktaContext","React","useOktaAuth","OktaError","error","name","message","toString","errorComponent","oktaAuth","authState","authStateReady","isPending","ErrorReporter","handleLoginRedirect","onAuthRequired","routeProps","_onAuthRequired","match","useRouteMatch","pendingLogin","handleLogin","current","setOriginalUri","onAuthRequiredFn","signInWithRedirect","isAuthenticated","Route","children","history","useHistory","authStateManager","getAuthState","idToken","accessToken","setAuthState","options","restoreOriginalUri","_","originalUri","replace","toRelativeUrl","window","location","origin","userAgent","subscribe","isLoginRedirect","updateAuthState","unsubscribe","err","AuthSdkError","Provider","value","ComponentToWrap","WrappedComponent","props","oktaAuthProps","displayName"],"mappings":"ihEAsBMA,EAAcC,gBAAyC,MAEhDC,EAAc,kBAAoBD,aAAiBD,ICV1DG,EAAwC,gBAAGC,IAAAA,aAC5CA,EAAMC,MAAQD,EAAME,QACdL,yBAAIG,EAAMC,UAAQD,EAAME,SAE1BL,mCAAWG,EAAMG,6BCArB,gBAAGC,IAAAA,iBAC0BN,IAAxBO,IAAAA,SAAUC,IAAAA,UACZC,GAAkBD,EAAUE,UAE5BC,EAAgBL,GAAkBL,SAExCF,aAAgB,WACdQ,EAASK,wBACR,CAACL,IAEDE,GAAkBD,EAAUN,MACtBH,gBAACY,GAAcT,MAAOM,EAAUN,QAGlC,oCCdgD,gBACvDW,IAAAA,eACGC,4BAE8Cd,IAAzCO,IAAAA,SAAUC,IAAAA,UAAWO,IAAAA,gBACvBC,EAAQC,gBAAcH,GACtBI,EAAenB,UAAa,UAElCA,aAAgB,eACRoB,8CAAc,uGACdD,EAAaE,4DAIjBF,EAAaE,SAAU,EAEvBb,EAASc,mBACHC,EAAmBT,GAAkBE,oCAEnCO,EAAiBf,mDAEjBA,EAASgB,sHAKdP,IAIDR,EAAUgB,gBACZN,EAAaE,SAAU,EAKrBZ,EAAUgB,iBAAoBhB,EAAUE,WAC1CS,OAED,CACDX,EAAUE,UACVF,EAAUgB,gBACVjB,EACAS,EACAH,EACAE,IAGGP,EAAUgB,gBAKbzB,gBAAC0B,yBACMX,IALA,iBC7CiC,gBAC1CP,IAAAA,SACAM,IAAAA,eACAa,IAAAA,SAEMC,EAAUC,mBACkB7B,YAAe,kBAC1CQ,EAQEA,EAASsB,iBAAiBC,eAPxB,CACLpB,WAAW,EACXc,iBAAiB,EACjBO,QAAS,KACTC,YAAa,YANZxB,OAAWyB,UAYlBlC,aAAgB,cACTQ,SAKAA,EAAS2B,QAAQC,qBACpB5B,EAAS2B,QAAQC,+DAAqB,WAAOC,EAAGC,mFAC9CV,EAAQW,QAAQC,gBAAcF,EAAaG,OAAOC,SAASC,6GAK/DnC,EAASoC,UAAe,8BAA4B,YAA+BpC,EAASoC,WAG5FpC,EAASsB,iBAAiBe,WAAU,SAACpC,GACnCyB,EAAazB,MAIVD,EAASsC,mBACZtC,EAASsB,iBAAiBiB,kBAGrB,kBAAMvC,EAASsB,iBAAiBkB,iBACtC,CAACxC,EAAUoB,KAETpB,EAAU,KACPyC,EAAM,IAAIC,eAAa,6DACtBlD,gBAACE,GAAUC,MAAO8C,WAIzBjD,gBAACD,EAAYoD,UAASC,MAAO,CAC3B5C,SAAAA,EACAC,UAAAA,EACAO,gBAAiBF,IAEhBa,mCChEc,SACnB0B,OAEMC,EAAmB,SAACC,OAClBC,EAAgBvD,WACfD,gBAACqD,mBAAoBG,EAAoCD,YAElED,EAAiBG,YAAc,iBAAmBJ,EAAgBI,aAAeJ,EAAgBjD,MAC1FkD"}